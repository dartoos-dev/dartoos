import 'dart:typed_data';

import 'package:dartoos/radix.dart';
import 'package:dartoos/src/bit/set_uint64.dart';

/// Binary text of a list of bytes.
const binBytes = BinBytes();

/// Binary text representation of bytes.
///
/// Normally, the characters '0' and '1' are suitable for most cases; however,
/// in some special circumstances, it may be desirable to use different symbols
/// such as 't' and 'f' for 'true' and 'false', 'h' and 'l' for 'high' and
/// 'low', 'O' and 'X' for tic-tac-toe symbols, and so on. You can change the
/// binary symbols by setting the constructor parameter _codeUnits_ with a
/// custom list of UTF-8 codes.
class BinBytes implements BytesAsText {
  /// Binary text of a list of bytes.
  ///
  /// Each byte is represented by eight digits. Example:
  ///
  /// - a list of three bytes like _[0x77, 0x48, 0xaa]_ will be printed as the
  /// 24-character text '011101110100100010101010', where 01110111 => 0x77;
  /// 01001000 => 0x48; and 10101010 => 0xaa.
  ///
  /// Characters To Represent Binary Digits
  ///
  /// The [codeUnits] parameter is a fixed 256-element list that defines the
  /// characters to be used. Each element is an 8-byte group of UTF-8 code
  /// units. The order of the elements determines which symbols represent a
  /// byte. For example, if the first element is _0x303030303030303030_ (unicode
  /// for '00000000'), then every byte whose value is 0x00 will be printed as
  /// '00000000'; likewise, if the second value is _0x303030303030303031_
  /// (unicode for '00000001'), then bytes whose value is 0x01 (one) will be
  /// printed as '00000001'; finally, if the last element is
  /// _0x3131313131313131_ (unicode for '11111111'), any byte with all bits set
  /// to '1' (0xff₁₆; 255₁₀) will be printed as '11111111'.
  ///
  /// In summary: each byte is used as an index in the binary symbol lookup
  /// table.
  const BinBytes({List<int> codeUnits = _zeroesAndOnes})
      : _codeUnits = codeUnits;

  // The source of characters.
  final List<int> _codeUnits;

  /// Binary text of a list of bytes.
  ///
  /// Example: _[0x77, 0x48, 0xaa]_ => _'011101110100100010101010'_.
  @override
  String call(Uint8List bytes) {
    assert(_codeUnits.length == 256);
    final binCodes = ByteData(bytes.length * 8);
    // [SetUint64] is being used because `setUint64` of [ByteData] is not
    // supported on dart2js — dart compiled into javascript.
    final setUint64 = SetUint64.big(binCodes);
    for (var i = 0; i < bytes.length; ++i) {
      setUint64(i * 8, _codeUnits[bytes[i]]);
    }
    return String.fromCharCodes(binCodes.buffer.asUint8List());
  }

  /// Unicode of 256 binary values from '00000000₂' up to '11111111₂'.
  static const _zeroesAndOnes = [
    0x3030303030303030, //   0 '00000000'
    0x3030303030303031, //   1 '00000001
    0x3030303030303130, //   2 '00000010'
    0x3030303030303131, //   3 '00000011'
    0x3030303030313030, //   4 '00000100'
    0x3030303030313031, //   5 '00000101'
    0x3030303030313130, //   6 '00000110'
    0x3030303030313131, //   7 '00000111'
    0x3030303031303030, //   8 '00001000'
    0x3030303031303031, //   9 '00001001'
    0x3030303031303130, //  10 '00001010'
    0x3030303031303131, //  11 '00001011'
    0x3030303031313030, //  12 '00001100'
    0x3030303031313031, //  13 '00001101'
    0x3030303031313130, //  14 '00001110'
    0x3030303031313131, //  15 '00001111'
    0x3030303130303030, //  16 '00010000'
    0x3030303130303031, //  17 '00010001
    0x3030303130303130, //  18 '00010010'
    0x3030303130303131, //  19 '00010011'
    0x3030303130313030, //  20 '00010100'
    0x3030303130313031, //  21 '00010101'
    0x3030303130313130, //  22 '00010110'
    0x3030303130313131, //  23 '00010111'
    0x3030303131303030, //  24 '00011000'
    0x3030303131303031, //  25 '00011001'
    0x3030303131303130, //  26 '00011010'
    0x3030303131303131, //  27 '00011011'
    0x3030303131313030, //  28 '00011100'
    0x3030303131313031, //  29 '00011101'
    0x3030303131313130, //  30 '00011110'
    0x3030303131313131, //  31 '00011111'
    0x3030313030303030, //  32 '00100000'
    0x3030313030303031, //  33 '00100001
    0x3030313030303130, //  34 '00100010'
    0x3030313030303131, //  35 '00100011'
    0x3030313030313030, //  36 '00100100'
    0x3030313030313031, //  37 '00100101'
    0x3030313030313130, //  38 '00100110'
    0x3030313030313131, //  39 '00100111'
    0x3030313031303030, //  40 '00101000'
    0x3030313031303031, //  41 '00101001'
    0x3030313031303130, //  42 '00101010'
    0x3030313031303131, //  43 '00101011'
    0x3030313031313030, //  44 '00101100'
    0x3030313031313031, //  45 '00101101'
    0x3030313031313130, //  46 '00101110'
    0x3030313031313131, //  47 '00101111'
    0x3030313130303030, //  48 '00110000'
    0x3030313130303031, //  49 '00110001
    0x3030313130303130, //  50 '00110010'
    0x3030313130303131, //  51 '00110011'
    0x3030313130313030, //  52 '00110100'
    0x3030313130313031, //  53 '00110101'
    0x3030313130313130, //  54 '00110110'
    0x3030313130313131, //  55 '00110111'
    0x3030313131303030, //  56 '00111000'
    0x3030313131303031, //  57 '00111001'
    0x3030313131303130, //  58 '00111010'
    0x3030313131303131, //  59 '00111011'
    0x3030313131313030, //  60 '00111100'
    0x3030313131313031, //  61 '00111101'
    0x3030313131313130, //  62 '00111110'
    0x3030313131313131, //  63 '00111111'
    0x3031303030303030, //  64 '01000000'
    0x3031303030303031, //  65 '01000001
    0x3031303030303130, //  66 '01000010'
    0x3031303030303131, //  67 '01000011'
    0x3031303030313030, //  68 '01000100'
    0x3031303030313031, //  69 '01000101'
    0x3031303030313130, //  70 '01000110'
    0x3031303030313131, //  71 '01000111'
    0x3031303031303030, //  72 '01001000'
    0x3031303031303031, //  73 '01001001'
    0x3031303031303130, //  74 '01001010'
    0x3031303031303131, //  75 '01001011'
    0x3031303031313030, //  76 '01001100'
    0x3031303031313031, //  77 '01001101'
    0x3031303031313130, //  78 '01001110'
    0x3031303031313131, //  79 '01001111'
    0x3031303130303030, //  80 '01010000'
    0x3031303130303031, //  81 '01010001
    0x3031303130303130, //  82 '01010010'
    0x3031303130303131, //  83 '01010011'
    0x3031303130313030, //  84 '01010100'
    0x3031303130313031, //  85 '01010101'
    0x3031303130313130, //  86 '01010110'
    0x3031303130313131, //  87 '01010111'
    0x3031303131303030, //  88 '01011000'
    0x3031303131303031, //  89 '01011001'
    0x3031303131303130, //  90 '01011010'
    0x3031303131303131, //  91 '01011011'
    0x3031303131313030, //  92 '01011100'
    0x3031303131313031, //  93 '01011101'
    0x3031303131313130, //  94 '01011110'
    0x3031303131313131, //  95 '01011111'
    0x3031313030303030, //  96 '01100000'
    0x3031313030303031, //  97 '01100001
    0x3031313030303130, //  98 '01100010'
    0x3031313030303131, //  99 '01100011'
    0x3031313030313030, // 100 '01100100'
    0x3031313030313031, // 101 '01100101'
    0x3031313030313130, // 102 '01100110'
    0x3031313030313131, // 103 '01100111'
    0x3031313031303030, // 104 '01101000'
    0x3031313031303031, // 105 '01101001'
    0x3031313031303130, // 106 '01101010'
    0x3031313031303131, // 107 '01101011'
    0x3031313031313030, // 108 '01101100'
    0x3031313031313031, // 109 '01101101'
    0x3031313031313130, // 110 '01101110'
    0x3031313031313131, // 111 '01101111'
    0x3031313130303030, // 112 '01110000'
    0x3031313130303031, // 113 '01110001
    0x3031313130303130, // 114 '01110010'
    0x3031313130303131, // 115 '01110011'
    0x3031313130313030, // 116 '01110100'
    0x3031313130313031, // 117 '01110101'
    0x3031313130313130, // 118 '01110110'
    0x3031313130313131, // 119 '01110111'
    0x3031313131303030, // 120 '01111000'
    0x3031313131303031, // 121 '01111001'
    0x3031313131303130, // 122 '01111010'
    0x3031313131303131, // 123 '01111011'
    0x3031313131313030, // 124 '01111100'
    0x3031313131313031, // 125 '01111101'
    0x3031313131313130, // 126 '01111110'
    0x3031313131313131, // 127 '01111111'
    0x3130303030303030, // 128 '10000000'
    0x3130303030303031, // 129 '10000001
    0x3130303030303130, // 130 '10000010'
    0x3130303030303131, // 131 '10000011'
    0x3130303030313030, // 132 '10000100'
    0x3130303030313031, // 133 '10000101'
    0x3130303030313130, // 134 '10000110'
    0x3130303030313131, // 135 '10000111'
    0x3130303031303030, // 136 '10001000'
    0x3130303031303031, // 137 '10001001'
    0x3130303031303130, // 138 '10001010'
    0x3130303031303131, // 139 '10001011'
    0x3130303031313030, // 140 '10001100'
    0x3130303031313031, // 141 '10001101'
    0x3130303031313130, // 142 '10001110'
    0x3130303031313131, // 143 '10001111'
    0x3130303130303030, // 144 '10010000'
    0x3130303130303031, // 145 '10010001
    0x3130303130303130, // 146 '10010010'
    0x3130303130303131, // 147 '10010011'
    0x3130303130313030, // 148 '10010100'
    0x3130303130313031, // 149 '10010101'
    0x3130303130313130, // 150 '10010110'
    0x3130303130313131, // 151 '10010111'
    0x3130303131303030, // 152 '10011000'
    0x3130303131303031, // 153 '10011001'
    0x3130303131303130, // 154 '10011010'
    0x3130303131303131, // 155 '10011011'
    0x3130303131313030, // 156 '10011100'
    0x3130303131313031, // 157 '10011101'
    0x3130303131313130, // 158 '10011110'
    0x3130303131313131, // 159 '10011111'
    0x3130313030303030, // 160 '10100000'
    0x3130313030303031, // 161 '10100001
    0x3130313030303130, // 162 '10100010'
    0x3130313030303131, // 163 '10100011'
    0x3130313030313030, // 164 '10100100'
    0x3130313030313031, // 165 '10100101'
    0x3130313030313130, // 166 '10100110'
    0x3130313030313131, // 167 '10100111'
    0x3130313031303030, // 168 '10101000'
    0x3130313031303031, // 179 '10101001'
    0x3130313031303130, // 170 '10101010'
    0x3130313031303131, // 171 '10101011'
    0x3130313031313030, // 172 '10101100'
    0x3130313031313031, // 173 '10101101'
    0x3130313031313130, // 174 '10101110'
    0x3130313031313131, // 175 '10101111'
    0x3130313130303030, // 176 '10110000'
    0x3130313130303031, // 177 '10110001
    0x3130313130303130, // 178 '10110010'
    0x3130313130303131, // 179 '10110011'
    0x3130313130313030, // 180 '10110100'
    0x3130313130313031, // 181 '10110101'
    0x3130313130313130, // 182 '10110110'
    0x3130313130313131, // 183 '10110111'
    0x3130313131303030, // 184 '10111000'
    0x3130313131303031, // 185 '10111001'
    0x3130313131303130, // 186 '10111010'
    0x3130313131303131, // 187 '10111011'
    0x3130313131313030, // 188 '10111100'
    0x3130313131313031, // 189 '10111101'
    0x3130313131313130, // 190 '10111110'
    0x3130313131313131, // 191 '10111111'
    0x3131303030303030, // 192 '11000000'
    0x3131303030303031, // 193 '11000001
    0x3131303030303130, // 194 '11000010'
    0x3131303030303131, // 195 '11000011'
    0x3131303030313030, // 196 '11000100'
    0x3131303030313031, // 197 '11000101'
    0x3131303030313130, // 198 '11000110'
    0x3131303030313131, // 199 '11000111'
    0x3131303031303030, // 200 '11001000'
    0x3131303031303031, // 201 '11001001'
    0x3131303031303130, // 202 '11001010'
    0x3131303031303131, // 203 '11001011'
    0x3131303031313030, // 204 '11001100'
    0x3131303031313031, // 205 '11001101'
    0x3131303031313130, // 206 '11001110'
    0x3131303031313131, // 207 '11001111'
    0x3131303130303030, // 208 '11010000'
    0x3131303130303031, // 209 '11010001
    0x3131303130303130, // 210 '11010010'
    0x3131303130303131, // 211 '11010011'
    0x3131303130313030, // 212 '11010100'
    0x3131303130313031, // 213 '11010101'
    0x3131303130313130, // 214 '11010110'
    0x3131303130313131, // 215 '11010111'
    0x3131303131303030, // 216 '11011000'
    0x3131303131303031, // 217 '11011001'
    0x3131303131303130, // 218 '11011010'
    0x3131303131303131, // 219 '11011011'
    0x3131303131313030, // 220 '11011100'
    0x3131303131313031, // 221 '11011101'
    0x3131303131313130, // 222 '11011110'
    0x3131303131313131, // 223 '11011111'
    0x3131313030303030, // 224 '11100000'
    0x3131313030303031, // 225 '11100001
    0x3131313030303130, // 226 '11100010'
    0x3131313030303131, // 227 '11100011'
    0x3131313030313030, // 228 '11100100'
    0x3131313030313031, // 229 '11100101'
    0x3131313030313130, // 230 '11100110'
    0x3131313030313131, // 231 '11100111'
    0x3131313031303030, // 232 '11101000'
    0x3131313031303031, // 233 '11101001'
    0x3131313031303130, // 234 '11101010'
    0x3131313031303131, // 235 '11101011'
    0x3131313031313030, // 236 '11101100'
    0x3131313031313031, // 237 '11101101'
    0x3131313031313130, // 238 '11101110'
    0x3131313031313131, // 239 '11101111'
    0x3131313130303030, // 240 '11110000'
    0x3131313130303031, // 241 '11110001
    0x3131313130303130, // 242 '11110010'
    0x3131313130303131, // 243 '11110011'
    0x3131313130313030, // 244 '11110100'
    0x3131313130313031, // 245 '11110101'
    0x3131313130313130, // 246 '11110110'
    0x3131313130313131, // 247 '11110111'
    0x3131313131303030, // 248 '11111000'
    0x3131313131303031, // 249 '11111001'
    0x3131313131303130, // 250 '11111010'
    0x3131313131303131, // 251 '11111011'
    0x3131313131313030, // 252 '11111100'
    0x3131313131313031, // 253 '11111101'
    0x3131313131313130, // 254 '11111110'
    0x3131313131313131, // 255 '11111111'
  ];
}
