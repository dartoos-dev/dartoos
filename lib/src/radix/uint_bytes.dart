import 'dart:typed_data';

import 'radix.dart';

/// Unsigned integer text of a list of bytes.
const uintBytes = UintBytes();

/// Unsigned integer text representation of bytes.
///
/// By default, the digits [0–9] are used as the decimal symbols. Normally,
/// these characters are suitable for most cases; however, in some special
/// circumstances, it may be desirable to use different symbols. You can change
/// the decimal symbols by setting the constructor parameter _codeUnits_ with
/// custom symbols.
class UintBytes implements BytesAsText {
  /// Unsigned integer text of a list of bytes — the default symbols are [0–9].
  ///
  /// Each byte is represented by three digits. Examples:
  ///
  /// - a list of three bytes like _[0x01, 0x02, 0x0b]_ will be represented by
  /// the decimal digits '001002011', where 001 => 0x01; 002 => 0x02; and 011 =>
  /// 0x0b.
  /// - a list whose content is _[0x00, 0x77, 0x48, 0xaa, 0xff]_ will be
  /// represented by the text '000119072170255', where: 000 => 0x00;
  /// 119 => 0x77; 072 => 0x48; 170 => 0xaa; and 255 => 0xff.
  ///
  /// The [codeUnits] parameter is a fixed 256-element list that sets the
  /// characters to be used. Each element is a 3-byte wide group of UTF-8 code
  /// units, and the order of them determines which symbols represent a byte
  /// value. For example, if the first element is _0x303030_ (unicode for
  /// '000'), then bytes whose value is 0x00 (zero) will be printed as '000';
  /// likewise, if the second element is _0x303031_ (unicode for '001'), then
  /// bytes whose value is 0x01 (one) will be printed as '001'; finally, if the
  /// last element is _0x323535_ (unicode for '255'), then bytes whose value is
  /// 0xff (255) will be printed as '255'.
  ///
  /// In summary: each byte is used as an index in the decimal symbol lookup
  /// table.
  ///
  /// See also:
  /// - [list of unicode characters](https://en.wikipedia.org/wiki/List_of_Unicode_characters)
  const UintBytes({List<int> codeUnits = _decSymbols}) : _codeUnits = codeUnits;

  // The source of decimal characters.
  final List<int> _codeUnits;

  /// Unsigned integer text of a list of bytes.
  ///
  /// Each byte is represented by three decimal symbols. Normally, these symbols
  /// range from '000' up to '255'.
  @override
  String call(Uint8List bytes) {
    assert(_codeUnits.length == 256);
    final decCodes = ByteData(bytes.length * 3);
    for (var i = 0; i < bytes.length; ++i) {
      final trio = _codeUnits[bytes[i]];
      final base = i * 3;
      // sets the first (leftmost) decimal symbol
      decCodes.setUint8(base, trio >> 16);
      // sets the remaining two decimal symbols (the first one gets truncated).
      decCodes.setUint16(base + 1, trio);
    }
    return String.fromCharCodes(decCodes.buffer.asUint8List());
  }

  /// The Unicode of 256 positive values ranging from '000₁₀' to '255₁₀'.
  static const _decSymbols = [
    0x303030, // 0   '000'
    0x303031, // 1   '001'
    0x303032, // 2   '002'
    0x303033, // 3   '003'
    0x303034, // 4   '004'
    0x303035, // 5   '005'
    0x303036, // 6   '006'
    0x303037, // 7   '007'
    0x303038, // 8   '008'
    0x303039, // 9   '009'
    0x303130, // 10  '010'
    0x303131, // 11  '011'
    0x303132, // 12  '012'
    0x303133, // 13  '013'
    0x303134, // 14  '014'
    0x303135, // 15  '015'
    0x303136, // 16  '016'
    0x303137, // 17  '017'
    0x303138, // 18  '018'
    0x303139, // 19  '019'
    0x303230, // 20  '020'
    0x303231, // 21  '021'
    0x303232, // 22  '022'
    0x303233, // 23  '023'
    0x303234, // 24  '024'
    0x303235, // 25  '025'
    0x303236, // 26  '026'
    0x303237, // 27  '027'
    0x303238, // 28  '028'
    0x303239, // 29  '029'
    0x303330, // 30  '030'
    0x303331, // 31  '031'
    0x303332, // 32  '032'
    0x303333, // 33  '033'
    0x303334, // 34  '034'
    0x303335, // 35  '035'
    0x303336, // 36  '036'
    0x303337, // 37  '037'
    0x303338, // 38  '038'
    0x303339, // 39  '039'
    0x303430, // 40  '040'
    0x303431, // 41  '041'
    0x303432, // 42  '042'
    0x303433, // 43  '043'
    0x303434, // 44  '044'
    0x303435, // 45  '045'
    0x303436, // 46  '046'
    0x303437, // 47  '047'
    0x303438, // 48  '048'
    0x303439, // 49  '049'
    0x303530, // 50  '050'
    0x303531, // 51  '051'
    0x303532, // 52  '052'
    0x303533, // 53  '053'
    0x303534, // 54  '054'
    0x303535, // 55  '055'
    0x303536, // 56  '056'
    0x303537, // 57  '057'
    0x303538, // 58  '058'
    0x303539, // 59  '059'
    0x303630, // 60  '060'
    0x303631, // 61  '061'
    0x303632, // 62  '062'
    0x303633, // 63  '063'
    0x303634, // 64  '064'
    0x303635, // 65  '065'
    0x303636, // 66  '066'
    0x303637, // 67  '067'
    0x303638, // 68  '068'
    0x303639, // 69  '069'
    0x303730, // 70  '070'
    0x303731, // 71  '071'
    0x303732, // 72  '072'
    0x303733, // 73  '073'
    0x303734, // 74  '074'
    0x303735, // 75  '075'
    0x303736, // 76  '076'
    0x303737, // 77  '077'
    0x303738, // 78  '078'
    0x303739, // 79  '079'
    0x303830, // 80  '080'
    0x303831, // 81  '081'
    0x303832, // 82  '082'
    0x303833, // 83  '083'
    0x303834, // 84  '084'
    0x303835, // 85  '085'
    0x303836, // 86  '086'
    0x303837, // 87  '087'
    0x303838, // 88  '088'
    0x303839, // 89  '089'
    0x303930, // 90  '090'
    0x303931, // 91  '091'
    0x303932, // 92  '092'
    0x303933, // 93  '093'
    0x303934, // 94  '094'
    0x303935, // 95  '095'
    0x303936, // 96  '096'
    0x303937, // 97  '097'
    0x303938, // 98  '098'
    0x303939, // 99  '099'
    0x313030, // 100 '100'
    0x313031, // 101 '101'
    0x313032, // 102 '102'
    0x313033, // 103 '103'
    0x313034, // 104 '104'
    0x313035, // 105 '105'
    0x313036, // 106 '106'
    0x313037, // 107 '107'
    0x313038, // 108 '108'
    0x313039, // 109 '109'
    0x313130, // 110 '110'
    0x313131, // 111 '111'
    0x313132, // 112 '112'
    0x313133, // 113 '113'
    0x313134, // 114 '114'
    0x313135, // 115 '115'
    0x313136, // 116 '116'
    0x313137, // 117 '117'
    0x313138, // 118 '118'
    0x313139, // 119 '119'
    0x313230, // 120 '120'
    0x313231, // 121 '121'
    0x313232, // 122 '122'
    0x313233, // 123 '123'
    0x313234, // 124 '124'
    0x313235, // 125 '125'
    0x313236, // 126 '126'
    0x313237, // 127 '127'
    0x313238, // 128 '128'
    0x313239, // 129 '129'
    0x313330, // 130 '130'
    0x313331, // 131 '131'
    0x313332, // 132 '132'
    0x313333, // 133 '133'
    0x313334, // 134 '134'
    0x313335, // 135 '135'
    0x313336, // 136 '136'
    0x313337, // 137 '137'
    0x313338, // 138 '138'
    0x313339, // 139 '139'
    0x313430, // 140 '140'
    0x313431, // 141 '141'
    0x313432, // 142 '142'
    0x313433, // 143 '143'
    0x313434, // 144 '144'
    0x313435, // 145 '145'
    0x313436, // 146 '146'
    0x313437, // 147 '147'
    0x313438, // 148 '148'
    0x313439, // 149 '149'
    0x313530, // 150 '150'
    0x313531, // 151 '151'
    0x313532, // 152 '152'
    0x313533, // 153 '153'
    0x313534, // 154 '154'
    0x313535, // 155 '155'
    0x313536, // 156 '156'
    0x313537, // 157 '157'
    0x313538, // 158 '158'
    0x313539, // 159 '159'
    0x313630, // 160 '160'
    0x313631, // 161 '161'
    0x313632, // 162 '162'
    0x313633, // 163 '163'
    0x313634, // 164 '164'
    0x313635, // 165 '165'
    0x313636, // 166 '166'
    0x313637, // 167 '167'
    0x313638, // 168 '168'
    0x313639, // 169 '169'
    0x313730, // 170 '170'
    0x313731, // 171 '171'
    0x313732, // 172 '172'
    0x313733, // 173 '173'
    0x313734, // 174 '174'
    0x313735, // 175 '175'
    0x313736, // 176 '176'
    0x313737, // 177 '177'
    0x313738, // 178 '178'
    0x313739, // 179 '179'
    0x313830, // 180 '180'
    0x313831, // 181 '181'
    0x313832, // 182 '182'
    0x313833, // 183 '183'
    0x313834, // 184 '184'
    0x313835, // 185 '185'
    0x313836, // 186 '186'
    0x313837, // 187 '187'
    0x313838, // 188 '188'
    0x313839, // 189 '189'
    0x313930, // 190 '190'
    0x313931, // 191 '191'
    0x313932, // 192 '192'
    0x313933, // 193 '193'
    0x313934, // 194 '194'
    0x313935, // 195 '195'
    0x313936, // 196 '196'
    0x313937, // 197 '197'
    0x313938, // 198 '198'
    0x313939, // 199 '199'
    0x323030, // 200 '200'
    0x323031, // 201 '201'
    0x323032, // 202 '202'
    0x323033, // 203 '203'
    0x323034, // 204 '204'
    0x323035, // 205 '205'
    0x323036, // 206 '206'
    0x323037, // 207 '207'
    0x323038, // 208 '208'
    0x323039, // 209 '209'
    0x323130, // 210 '210'
    0x323131, // 211 '211'
    0x323132, // 212 '212'
    0x323133, // 213 '213'
    0x323134, // 214 '214'
    0x323135, // 215 '215'
    0x323136, // 216 '216'
    0x323137, // 217 '217'
    0x323138, // 218 '218'
    0x323139, // 219 '219'
    0x323230, // 220 '220'
    0x323231, // 221 '221'
    0x323232, // 222 '222'
    0x323233, // 223 '223'
    0x323234, // 224 '224'
    0x323235, // 225 '225'
    0x323236, // 226 '226'
    0x323237, // 227 '227'
    0x323238, // 228 '228'
    0x323239, // 229 '229'
    0x323330, // 230 '230'
    0x323331, // 231 '231'
    0x323332, // 232 '232'
    0x323333, // 233 '233'
    0x323334, // 234 '234'
    0x323335, // 235 '235'
    0x323336, // 236 '236'
    0x323337, // 237 '237'
    0x323338, // 238 '238'
    0x323339, // 239 '239'
    0x323430, // 240 '240'
    0x323431, // 241 '241'
    0x323432, // 242 '242'
    0x323433, // 243 '243'
    0x323434, // 244 '244'
    0x323435, // 245 '245'
    0x323436, // 246 '246'
    0x323437, // 247 '247'
    0x323438, // 248 '248'
    0x323439, // 249 '249'
    0x323530, // 250 '250'
    0x323531, // 251 '251'
    0x323532, // 252 '252'
    0x323533, // 253 '253'
    0x323534, // 254 '254'
    0x323535, // 255 '255'
  ];
}
